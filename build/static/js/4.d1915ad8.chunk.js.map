{"version":3,"sources":["components/UIElements/Button.js","components/UIElements/Card.js","components/UIElements/Modal.js","containers/ModalContainer.js","components/UIElements/QuestionOptions.js","containers/QuestionOptionsContainer.js","components/UIElements/Question.js","components/pages/SelectedCategory.js","containers/QuizContainer.js"],"names":["Button","props","href","className","size","inverse","danger","children","to","exact","type","onClick","disabled","Card","style","useStyles","makeStyles","theme","modal","display","alignItems","justifyContent","paper","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","connect","state","answeredList","completedList","classes","React","useState","open","setOpen","console","log","handleClose","Modal","aria-labelledby","aria-describedby","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","id","map","question","index","answered","QuestionOption","correctAnswer","wrongAnswers","handleClick","currentIndex","setQuestionCompleted","answersList","setAnswersList","handleSubmit","event","preventDefault","target","value","checked","selectedAnswer","shuffleArray","useCallback","array","i","length","j","Math","floor","random","useEffect","answersArray","onSubmit","htmlFor","name","isCompleted","answer","dangerouslySetInnerHTML","__html","dispatch","result","QuestionOptions","Question","updateScore","messageStatus","setMessageStatus","correct_answer","incorrect_answers","color","SelectedCategory","getQuiz","quizInfo","isLoading","categoryId","useParams","history","useHistory","currentQuiz","setCurrentQuiz","JSON","parse","localStorage","getItem","push","questions","find","quiz","changeQuestion","status","oldIndex","newIndex","prevVal","LoadingSpinner","reduce","accumulate","item","loading"],"mappings":"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","file":"static/js/4.d1915ad8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"./Button.css\";\r\n\r\nconst Button = (props) => {\r\n  if (props.href) {\r\n    return (\r\n      <a\r\n        className={`button button--${props.size || \"default\"} ${\r\n          props.inverse && \"button--inverse\"\r\n        } ${props.danger && \"button--danger\"}`}\r\n        href={props.href}\r\n      >\r\n        {props.children}\r\n      </a>\r\n    );\r\n  }\r\n  if (props.to) {\r\n    return (\r\n      <Link\r\n        to={props.to}\r\n        exact={props.exact}\r\n        className={`button button--${props.size || \"default\"} ${\r\n          props.inverse && \"button--inverse\"\r\n        } ${props.danger && \"button--danger\"}`}\r\n      >\r\n        {props.children}\r\n      </Link>\r\n    );\r\n  }\r\n  return (\r\n    <button\r\n      className={`button button--${props.size || \"default\"} ${\r\n        props.inverse && \"button--inverse\"\r\n      } ${props.danger && \"button--danger\"}`}\r\n      type={props.type}\r\n      onClick={props.onClick}\r\n      disabled={props.disabled}\r\n    >\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\n\r\nimport \"./Card.css\";\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div className={`card ${props.className}`} style={props.style}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport \"./Modal.css\";\r\nimport Button from \"./Button\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  modal: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  paper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nexport default function TransitionsModal({ answeredList }) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n  console.log(answeredList);\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button danger type=\"button\" onClick={handleOpen}>\r\n        SUBMIT QUIZ\r\n      </Button>\r\n      <Modal\r\n        aria-labelledby=\"transition-modal-title\"\r\n        aria-describedby=\"transition-modal-description\"\r\n        className={classes.modal}\r\n        open={open}\r\n        onClose={handleClose}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 500,\r\n        }}\r\n      >\r\n        <Fade in={open}>\r\n          <div className={classes.paper}>\r\n            <h2 id=\"transition-modal-title\">SCORE TABLE</h2>\r\n            <div id=\"transition-modal-description\">\r\n              {answeredList &&\r\n                answeredList.map((question, index) => {\r\n                  return (\r\n                    <div\r\n                      key={`questionResult-${index}`}\r\n                      className=\"result-div-box\"\r\n                      style={{\r\n                        background:\r\n                          question.answered === \"true\"\r\n                            ? \"green\"\r\n                            : question.answered === \"no\"\r\n                            ? null\r\n                            : \"red\",\r\n                      }}\r\n                    >\r\n                      {index + 1}\r\n                    </div>\r\n                  );\r\n                })}\r\n            </div>\r\n            <div className=\"all-buttons\">\r\n              <Button inverse type=\"button\" onClick={handleClose}>\r\n                CANCEL\r\n              </Button>\r\n              <Button to=\"/result\">CONFIRM</Button>\r\n            </div>\r\n          </div>\r\n        </Fade>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import { connect } from \"react-redux\";\r\nimport Modal from \"../components/UIElements/Modal\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  answeredList: state.completedList,\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(Modal);\r\n","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport Button from \"./Button\";\r\n\r\nimport \"./QuestionOptions.css\";\r\n\r\nconst QuestionOption = ({\r\n  type,\r\n  correctAnswer,\r\n  wrongAnswers,\r\n  handleClick,\r\n  currentIndex,\r\n  completedList,\r\n  setQuestionCompleted,\r\n}) => {\r\n  const [answersList, setAnswersList] = useState([]);\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (type === \"multiple\") {\r\n      if (!event.target[0].value || event.target[0].value === \"\") return;\r\n      handleClick(event.target[0].value);\r\n      setQuestionCompleted(\r\n        currentIndex,\r\n        event.target[0].value === correctAnswer\r\n      );\r\n    } else {\r\n      if (!event.target[0].checked && !event.target[1].checked) return;\r\n      const selectedAnswer = event.target[0].checked ? \"True\" : \"False\";\r\n      handleClick(selectedAnswer);\r\n      setQuestionCompleted(currentIndex, selectedAnswer === correctAnswer);\r\n    }\r\n  };\r\n\r\n  const shuffleArray = useCallback((array) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    setAnswersList(array);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (type === \"multiple\") {\r\n      let answersArray = [correctAnswer, ...wrongAnswers];\r\n      shuffleArray(answersArray);\r\n    }\r\n  }, [correctAnswer, wrongAnswers, type]);\r\n\r\n  if (type !== \"multiple\") {\r\n    return (\r\n      <form className=\"form\" onSubmit={handleSubmit}>\r\n        <div className=\"options-bool\">\r\n          <label htmlFor={`${type}-${currentIndex}-true`}>True</label>\r\n          <input\r\n            name={`${type}-${currentIndex}`}\r\n            id={`${type}-${currentIndex}-true`}\r\n            type=\"radio\"\r\n          />\r\n          <br />\r\n          <label htmlFor={`${type}-${currentIndex}-false`}>False</label>\r\n          <input\r\n            name={`${type}-${currentIndex}`}\r\n            id={`${type}-${currentIndex}-false`}\r\n            type=\"radio\"\r\n          />\r\n        </div>\r\n        <Button\r\n          disabled={\r\n            completedList &&\r\n            completedList.length > 0 &&\r\n            currentIndex !== null &&\r\n            completedList[currentIndex].isCompleted\r\n          }\r\n          inverse\r\n          type=\"submit\"\r\n        >\r\n          LOCK OPTION\r\n        </Button>\r\n      </form>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <form className=\"form\" onSubmit={handleSubmit}>\r\n      <div>\r\n        <select>\r\n          {answersList.length > 0 &&\r\n            answersList.map((answer, index) => (\r\n              <option\r\n                key={`answer-${index}`}\r\n                value={answer}\r\n                dangerouslySetInnerHTML={{ __html: answer }}\r\n              />\r\n            ))}\r\n        </select>\r\n      </div>\r\n      <Button\r\n        disabled={\r\n          completedList &&\r\n          currentIndex !== null &&\r\n          completedList.length > 0 &&\r\n          completedList[currentIndex].isCompleted\r\n        }\r\n        inverse\r\n        type=\"submit\"\r\n      >\r\n        LOCK OPTION\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default QuestionOption;\r\n","import { connect } from \"react-redux\";\r\nimport { setQuestionCompleted } from \"../actions\";\r\nimport QuestionOptions from \"../components/UIElements/QuestionOptions\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  completedList: state.completedList,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setQuestionCompleted: (index, result) =>\r\n    dispatch(setQuestionCompleted(index, result)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionOptions);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Card from \"./Card\";\r\n// import QuestionOption from \"./QuestionOptions\";\r\nimport QuestionOption from \"../../containers/QuestionOptionsContainer\";\r\n\r\nconst Question = ({ question, updateScore, currentIndex }) => {\r\n  const [messageStatus, setMessageStatus] = useState(null);\r\n\r\n  const handleClick = (selectedAnswer) => {\r\n    if (selectedAnswer === question.correct_answer) {\r\n      setMessageStatus(\"Correct Answer\");\r\n      updateScore(true);\r\n    } else {\r\n      setMessageStatus(\"Wrong Answer\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setMessageStatus(null);\r\n  }, [question]);\r\n\r\n  return (\r\n    <>\r\n      {question && (\r\n        <Card>\r\n          <h4 dangerouslySetInnerHTML={{ __html: question.question }} />\r\n          <QuestionOption\r\n            type={question.type}\r\n            correctAnswer={question.correct_answer}\r\n            wrongAnswers={question.incorrect_answers}\r\n            handleClick={handleClick}\r\n            currentIndex={currentIndex}\r\n          />\r\n          {messageStatus && (\r\n            <p\r\n              style={{\r\n                color: messageStatus === \"Correct Answer\" ? \"green\" : \"red\",\r\n              }}\r\n            >\r\n              {messageStatus}\r\n            </p>\r\n          )}\r\n          {messageStatus === \"Wrong Answer\" && (\r\n            <p>\r\n              Right Answer:{\" \"}\r\n              <span\r\n                dangerouslySetInnerHTML={{ __html: question.correct_answer }}\r\n              ></span>\r\n            </p>\r\n          )}\r\n        </Card>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Question;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport Button from \"../UIElements/Button\";\r\n\r\nimport Card from \"../UIElements/Card\";\r\nimport Modal from \"../../containers/ModalContainer\";\r\nimport LoadingSpinner from \"../UIElements/LoadingSpinner\";\r\nimport Question from \"../UIElements/Question\";\r\n\r\nconst SelectedCategory = ({\r\n  getQuiz,\r\n  quizInfo,\r\n  updateScore,\r\n  isLoading,\r\n  completedList,\r\n}) => {\r\n  const categoryId = useParams().categoryId;\r\n  const history = useHistory();\r\n  const [currentQuiz, setCurrentQuiz] = useState({\r\n    currentIndex: null,\r\n    question: {},\r\n  });\r\n\r\n  useEffect(() => {\r\n    const isQuizStarted = JSON.parse(localStorage.getItem(\"quizStarted\"));\r\n    if (!isQuizStarted) {\r\n      history.push(\"/\");\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getQuiz(categoryId);\r\n  }, [getQuiz, categoryId]);\r\n\r\n  useEffect(() => {\r\n    setCurrentQuiz({\r\n      currentIndex: 0,\r\n      question: quizInfo.questions.find((quiz, index) => index === 0),\r\n    });\r\n  }, [quizInfo]);\r\n\r\n  const changeQuestion = (status, oldIndex) => {\r\n    let newIndex = status === \"dec\" ? oldIndex - 1 : oldIndex + 1;\r\n    setCurrentQuiz((prevVal) => {\r\n      return {\r\n        currentIndex: newIndex,\r\n        question: quizInfo.questions.find((quiz, index) => index === newIndex),\r\n      };\r\n    });\r\n  };\r\n\r\n  console.log(completedList);\r\n\r\n  return (\r\n    <Card>\r\n      {isLoading && <LoadingSpinner />}\r\n      {!isLoading && currentQuiz && (\r\n        <div>\r\n          <h3>QUESTION {currentQuiz.currentIndex + 1}:</h3>\r\n          {currentQuiz && currentQuiz.question && (\r\n            <Question\r\n              currentIndex={currentQuiz.currentIndex}\r\n              question={currentQuiz.question}\r\n              updateScore={updateScore}\r\n            />\r\n          )}\r\n          <p>\r\n            Answered Questions:{\" \"}\r\n            {completedList\r\n              ? completedList.reduce(\r\n                  (accumulate, item) =>\r\n                    item.isCompleted ? accumulate + 1 : accumulate,\r\n                  0\r\n                )\r\n              : 0}\r\n            /10\r\n          </p>\r\n          {currentQuiz.currentIndex === 9 && <Modal />}\r\n\r\n          <div className=\"buttons\">\r\n            <Button\r\n              type=\"button\"\r\n              onClick={() => changeQuestion(\"dec\", currentQuiz.currentIndex)}\r\n              disabled={currentQuiz.currentIndex === 0 ? true : false}\r\n            >\r\n              PREVIOUS\r\n            </Button>\r\n            <Button\r\n              type=\"button\"\r\n              onClick={() => changeQuestion(\"inc\", currentQuiz.currentIndex)}\r\n              disabled={currentQuiz.currentIndex === 9 ? true : false}\r\n            >\r\n              NEXT\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default SelectedCategory;\r\n","import { connect } from \"react-redux\";\r\n\r\nimport SelectedCategory from \"../components/pages/SelectedCategory\";\r\nimport { getQuiz, updateScore } from \"../actions\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  quizInfo: state.quiz,\r\n  isLoading: state.loading,\r\n  completedList: state.completedList,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getQuiz: (id) => dispatch(getQuiz(id)),\r\n  updateScore: (status) => dispatch(updateScore(status)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectedCategory);\r\n"],"sourceRoot":""}