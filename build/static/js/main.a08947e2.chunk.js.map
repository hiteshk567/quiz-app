{"version":3,"sources":["actions/index.js","components/UIElements/LoadingSpinner.js","constants/index.js","components/navigation/Header.js","App.js","containers/AppContainer.js","reducers/root-reducer.js","reducers/loading-status.js","reducers/categories-reducer.js","reducers/quiz-reducer.js","reducers/user-reducer.js","reducers/completed-reducer.js","index.js"],"names":["getCategories","dispatch","a","type","ACTIONS","fetch","response","json","data","payload","trivia_categories","getQuiz","id","questionArray","results","map","item","isCompleted","categoryId","questions","setUser","name","console","log","updateScore","answerStatus","setQuestionCompleted","index","result","setCompletedToDefault","setUserInfoToDefault","LoadingSpinner","props","className","asOverlay","GET_CATEGORIES","SET_LOADING","SET_QUIZ_INFO","SET_USER_INFO","UPDATE_USER_SCORE","SET_QUESTION_COMPLETED","SET_COMPLETED_TO_DEFAULT","SET_USER_INFO_TO_DEFAULT","MainHeader","to","CategorySelection","React","lazy","QuizContainer","Result","App","fetchCategories","useEffect","routes","path","exact","fallback","connect","rootReducer","combineReducers","loading","state","action","category","quiz","user","score","completedList","Array","fill","answered","newArray","store","createStore","applyMiddleware","reduxThunk","ReactDOM","render","AppContainer","document","getElementById"],"mappings":"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","file":"static/js/main.a08947e2.chunk.js","sourcesContent":["import * as ACTIONS from \"../constants\";\r\n\r\nexport const getCategories = () => async (dispatch) => {\r\n  dispatch({\r\n    type: ACTIONS.SET_LOADING,\r\n  });\r\n  const response = await fetch(\"https://opentdb.com/api_category.php\");\r\n  const data = await response.json();\r\n  dispatch({\r\n    type: ACTIONS.GET_CATEGORIES,\r\n    payload: data.trivia_categories,\r\n  });\r\n  dispatch({\r\n    type: ACTIONS.SET_LOADING,\r\n  });\r\n};\r\n\r\nexport const getQuiz = (id) => async (dispatch) => {\r\n  dispatch({\r\n    type: ACTIONS.SET_LOADING,\r\n  });\r\n  const response = await fetch(\r\n    `https://opentdb.com/api.php?amount=10&category=${id}`\r\n  );\r\n  const data = await response.json();\r\n  const questionArray = data.results.map((item) => ({\r\n    ...item,\r\n    isCompleted: false,\r\n  }));\r\n  dispatch({\r\n    type: ACTIONS.SET_QUIZ_INFO,\r\n    payload: {\r\n      categoryId: id,\r\n      questions: questionArray,\r\n    },\r\n  });\r\n  dispatch({\r\n    type: ACTIONS.SET_LOADING,\r\n  });\r\n};\r\n\r\nexport const setUser = (name) => (dispatch) => {\r\n  console.log(name);\r\n  dispatch({\r\n    type: ACTIONS.SET_USER_INFO,\r\n    payload: name,\r\n  });\r\n};\r\n\r\nexport const updateScore = (answerStatus) => (dispatch) => {\r\n  dispatch({\r\n    type: ACTIONS.UPDATE_USER_SCORE,\r\n    payload: answerStatus,\r\n  });\r\n};\r\n\r\nexport const setQuestionCompleted = (index, result) => (dispatch) => {\r\n  dispatch({\r\n    type: ACTIONS.SET_QUESTION_COMPLETED,\r\n    payload: { index, result },\r\n  });\r\n};\r\n\r\nexport const setCompletedToDefault = () => (dispatch) => {\r\n  dispatch({\r\n    type: ACTIONS.SET_COMPLETED_TO_DEFAULT,\r\n  });\r\n};\r\n\r\nexport const setUserInfoToDefault = () => (dispatch) => {\r\n  dispatch({\r\n    type: ACTIONS.SET_USER_INFO_TO_DEFAULT,\r\n  });\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./LoadingSpinner.css\";\r\n\r\nconst LoadingSpinner = (props) => {\r\n  return (\r\n    <div className={`${props.asOverlay && \"loading-spinner__overlay\"}`}>\r\n      <div className=\"lds-dual-ring\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingSpinner;\r\n","export const GET_CATEGORIES = \"GET_CATEGORIES\";\r\nexport const SET_LOADING = \"SET_LOADING\";\r\nexport const SET_QUIZ_INFO = \"SET_QUIZ_INFO\";\r\nexport const SET_USER_INFO = \"SET_USER_INFO\";\r\nexport const UPDATE_USER_SCORE = \"UPDATE_USER_SCORE\";\r\nexport const SET_QUESTION_COMPLETED = \"SET_QUESTION_COMPLETED\";\r\nexport const SET_COMPLETED_TO_DEFAULT = \"SET_COMPLETED_TO_DEFAULT\";\r\nexport const SET_USER_INFO_TO_DEFAULT = \"SET_USER_INFO_TO_DEFAULT\";\r\n","import React from \"react\";\r\nimport { NavLink, Link } from \"react-router-dom\";\r\n\r\nimport \"./Header.css\";\r\n\r\nconst MainHeader = () => {\r\n  return (\r\n    <header className=\"main-header\">\r\n      <h1 className=\"main-navigation__title\">\r\n        <Link to=\"/\">QUIZ APP</Link>\r\n      </h1>\r\n      <nav className=\"main-navigation__header-nav\">\r\n        <ul className=\"nav-links\">\r\n          <li>\r\n            <NavLink to=\"/\">HOME</NavLink>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default MainHeader;\r\n","import React, { Suspense, useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\n\nimport Header from \"./components/navigation/Header\";\nimport \"./App.css\";\nimport LoadingSpinner from \"./components/UIElements/LoadingSpinner\";\nconst CategorySelection = React.lazy(() =>\n  import(\"./containers/CategoryContainer\")\n);\nconst QuizContainer = React.lazy(() => import(\"./containers/QuizContainer\"));\nconst Result = React.lazy(() => import(\"./containers/ResultContainer\"));\n\nfunction App({ fetchCategories }) {\n  useEffect(() => {\n    fetchCategories();\n  }, []);\n\n  const routes = (\n    <Switch>\n      <Route path=\"/\" exact>\n        <CategorySelection />\n      </Route>\n      <Route path=\"/category/:categoryId\" exact>\n        <QuizContainer />\n      </Route>\n      <Route path=\"/result\" exact>\n        <Result />\n      </Route>\n      <Redirect to=\"/\" />\n    </Switch>\n  );\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Header />\n        <main>\n          <Suspense\n            fallback={\n              <div>\n                <LoadingSpinner />\n              </div>\n            }\n          >\n            {routes}\n          </Suspense>\n        </main>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { connect } from \"react-redux\";\r\n\r\nimport App from \"../App\";\r\nimport { getCategories } from \"../actions\";\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  fetchCategories: () => dispatch(getCategories()),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","import { combineReducers } from \"redux\";\r\nimport { loading } from \"./loading-status\";\r\nimport { category } from \"./categories-reducer\";\r\nimport { quiz } from \"./quiz-reducer\";\r\nimport { user } from \"./user-reducer\";\r\nimport { completedList } from \"./completed-reducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  loading,\r\n  category,\r\n  quiz,\r\n  user,\r\n  completedList,\r\n});\r\n","import * as ACTIONS from \"../constants\";\r\n\r\nexport const loading = (state = false, action) => {\r\n  switch (action.type) {\r\n    case ACTIONS.SET_LOADING:\r\n      return !state;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import * as ACTIONS from \"../constants\";\r\n\r\nexport const category = (state = [], action) => {\r\n  switch (action.type) {\r\n    case ACTIONS.GET_CATEGORIES:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import * as ACTIONS from \"../constants\";\r\n\r\nexport const quiz = (state = { categoryId: null, questions: [] }, action) => {\r\n  switch (action.type) {\r\n    case ACTIONS.SET_QUIZ_INFO:\r\n      return {\r\n        categoryId: action.payload.categoryId,\r\n        questions: action.payload.questions,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import * as ACTIONS from \"../constants\";\r\n\r\nexport const user = (state = { name: \"\", score: 0 }, action) => {\r\n  switch (action.type) {\r\n    case ACTIONS.SET_USER_INFO:\r\n      return { ...state, name: action.payload };\r\n    case ACTIONS.UPDATE_USER_SCORE:\r\n      return {\r\n        ...state,\r\n        score: action.payload ? state.score + 10 : state.score,\r\n      };\r\n    case ACTIONS.SET_USER_INFO_TO_DEFAULT:\r\n      return { ...state, score: 0 };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import * as ACTIONS from \"../constants\";\r\n\r\n// export const completedList = (\r\n//   state = new Array(10).fill(\r\n//     Object.assign({}, { isCompleted: false, answered: \"no\" })\r\n//   ),\r\n//   action\r\n// ) => {\r\n//   switch (action.type) {\r\n//     case ACTIONS.SET_QUESTION_COMPLETED:\r\n//       const newArray = [...state];\r\n//       newArray[action.payload] = true;\r\n//       return newArray;\r\n//     case ACTIONS.SET_COMPLETED_TO_DEFAULT:\r\n//       return new Array(10).fill(false);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nexport const completedList = (\r\n  state = new Array(10)\r\n    .fill(null)\r\n    .map(() => ({ isCompleted: false, answered: \"no\" })),\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case ACTIONS.SET_QUESTION_COMPLETED:\r\n      const newArray = [...state];\r\n      newArray[action.payload.index].isCompleted = true;\r\n      newArray[action.payload.index].answered =\r\n        action.payload.result === true ? \"true\" : \"false\";\r\n      return newArray;\r\n    case ACTIONS.SET_COMPLETED_TO_DEFAULT:\r\n      return new Array(10)\r\n        .fill(null)\r\n        .map(() => ({ isCompleted: false, answered: \"no\" }));\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport AppContainer from \"./containers/AppContainer\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport reduxThunk from \"redux-thunk\";\nimport { rootReducer } from \"./reducers/root-reducer\";\n\nconst store = createStore(rootReducer, applyMiddleware(reduxThunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <AppContainer />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}